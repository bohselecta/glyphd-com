import Stripe from 'stripe'
import { NextResponse } from 'next/server'
import { seedCreatorCredits, downgradeToFree, attachStripe, setTier } from '@utils/billing'
export const runtime='nodejs'
const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, { apiVersion: '2024-06-20' })
export async function POST(req: Request){ const sig=req.headers.get('stripe-signature'); const raw=await req.text(); let event:Stripe.Event; try{ event=stripe.webhooks.constructEvent(raw, sig!, process.env.STRIPE_WEBHOOK_SECRET!) }catch(e:any){ return NextResponse.json({ok:false,message:`Webhook signature failed: ${e.message}`},{status:400}) } try{ switch(event.type){ case 'checkout.session.completed': { const s=event.data.object as Stripe.Checkout.Session; const subId=String(s.subscription||''); const sub=subId?await stripe.subscriptions.retrieve(subId):null; const userId=s.metadata?.userId||sub?.metadata?.userId||''; const customerId=String(s.customer||''); if(userId){ await attachStripe(userId, customerId, subId); await setTier(userId,'creator'); await seedCreatorCredits(userId) } break } case 'invoice.paid': { const inv=event.data.object as Stripe.Invoice; const subId=String(inv.subscription||''); const sub=subId?await stripe.subscriptions.retrieve(subId):null; const userId=sub?.metadata?.userId||''; if(userId) await seedCreatorCredits(userId); break } case 'invoice.payment_failed': case 'customer.subscription.deleted': { const sub=event.data.object as Stripe.Subscription; const userId=sub.metadata?.userId||''; if(userId) await downgradeToFree(userId); break } default: break } }catch(e:any){ return NextResponse.json({ok:false,message:e.message},{status:500}) } return NextResponse.json({received:true}) }
