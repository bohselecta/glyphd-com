import { NextResponse, NextRequest } from 'next/server'
const PUBLIC_PATHS=['/','/pricing','/feed','/api/feed','/api/feed/like','/api/feed/post']
export async function middleware(req: NextRequest){const{pathname}=req.nextUrl;const m=req.method.toUpperCase();const res=NextResponse.next();res.headers.set('X-Frame-Options','DENY');res.headers.set('X-Content-Type-Options','nosniff');res.headers.set('Referrer-Policy','strict-origin-when-cross-origin');res.headers.set('Permissions-Policy','camera=(), microphone=(), geolocation=()');res.headers.set('Cross-Origin-Opener-Policy','same-origin');res.headers.set('Cross-Origin-Resource-Policy','same-origin');res.headers.set('Strict-Transport-Security','max-age=63072000; includeSubDomains; preload');if(m==='GET'&&PUBLIC_PATHS.some(p=>pathname.startsWith(p))){return res}const token=req.headers.get('x-demo-auth');if(!token){return NextResponse.json({ok:false,error:'unauthorized'},{status:401})}if(m!=='GET'&&m!=='HEAD'&&m!=='OPTIONS'){const origin=req.headers.get('origin')||'';const host=req.headers.get('host')||'';const same=origin.endsWith(host);const csrf=req.headers.get('x-csrf-token');if(!same&&!csrf){return NextResponse.json({ok:false,error:'csrf_invalid'},{status:403})}}return res}
export const config={matcher:['/((?!_next/static|_next/image|favicon.ico|manifest.json).*)']}
